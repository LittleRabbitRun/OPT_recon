/*****************************************************************************
** FILE IDENTIFICATION
**
**      Name:         real_complex_helpers.c (adapted from Jwalls code libfdr2.c)
**      Purpose:      functions for manipulating real and complex data
**      Programmer:   L.B
**      Date Started: Aug 2011
**
**  This is part of the OPT_RECON program
**  
**
**  This program is free software; you can redistribute it and/or modify
**  it under the terms of the GNU General Public License (version 2) as
**  published by the Free Software Foundation.
**
**  This program is distributed in the hope that it will be useful,
**  but WITHOUT ANY WARRANTY; without even the implied warranty of
**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
**  GNU General Public License for more details.
******************************************************************************/
#include "real_complex_helpers.h"

int slicewise_multiply_complex_by_real(mihandle_t file1, mihandle_t file2, mihandle_t fileout, int flags)
{
 long mz,my,mx;
 long nz,ny,nx;
 long pz,py,px;
 long z, slice, i;
 unsigned long start[3], count[3];
  
 fdr_complex *data1_3d = NULL;
 float *data2_3d = NULL;
 fdr_complex *data3_3d = NULL;
  
 float x, y;

 int result;
 int num_slices = NUMSLICES; 
 result = get_minc_spatial_dimensions_from_handle(file1, &mz, &my, &mx);
 if(!result) return 0;
 if(verbose>1) fprintf(stdout, "Obtained dim1\n");
  
 result = get_minc_spatial_dimensions_from_handle(file2, &nz, &ny, &nx);
 if(!result) return 0;
 if(verbose>1) fprintf(stdout, "Obtained dim2\n");
  
 if(mz != nz || my != ny || nx != nx)
 {
  fprintf(stderr, "Dimensions do not match (in1: [%ld,%ld,%ld] in2: [%ld,%ld,%ld])\n", mz,my,mx, nz,ny,nx);
  return 0;
 }
  
 result = get_minc_spatial_dimensions_from_handle(fileout, &pz, &py, &px);
 if(!result) return 0;
 if(verbose>1) fprintf(stdout, "Obtained dimout\n");
  
 if(mz != nz || my != ny || nx != nx)
 {
  fprintf(stderr, "Dimensions do not match (in1: [%ld,%ld,%ld] out: [%ld,%ld,%ld])\n", mz,my,mx, nz,ny,nx);
  return 0;
 }  
  
 data1_3d = (fdr_complex *)fftwf_malloc(num_slices*ny*nx*sizeof(fdr_complex));
 data2_3d = (float *)fftwf_malloc(num_slices*ny*nx*sizeof(float));
 data3_3d = (fdr_complex *)fftwf_malloc(num_slices*ny*nx*sizeof(fdr_complex));
 if(verbose>1) fprintf(stdout, "Allocated data\n");
  
 for(z=0;z<nz;z+=num_slices)
  {   
   if(z+num_slices > nz)
   {
   num_slices = nz - z;
   }
   /* 
    * Retrieve the data from the file 
    */
   start[0] = (unsigned long)z; start[1] = start[2] = 0;
   count[0] = NUMSLICES;
   count[1] = (unsigned long)my;
   count[2] = (unsigned long)mx;
    
   fprintf(stdout, "Collecting data from %ld %ld %ld -- %ld %ld %ld\n", start[0], start[1], start[2],
                                                                 count[0]+start[0], count[1], count[2]);
   result = miget_voxel_value_hyperslab(file1,MI_TYPE_FCOMPLEX,start,count, (fdr_complex *) data1_3d);
   if(result == MI_ERROR)
   {
    fprintf(stderr, "Error loading 2D data file1.\n");
    return 0;
   }
    
   result = miget_voxel_value_hyperslab(file2,MI_TYPE_FLOAT,start,count, (float *) data2_3d);
   if(result == MI_ERROR)
   {
    fprintf(stderr, "Error loading 2D data file2.\n");
    return 0;
   }
        
   for(i=0;i<nx*ny*num_slices;i++)
   {
    data3_3d[i] = ( (float)creal(data1_3d[i]) * (float)data2_3d[i] ) + 
                  ( (float)cimag(data1_3d[i]) * (float)data2_3d[i] ) * I;
   }
    
   /* Write that out to the file */
   result = miset_voxel_value_hyperslab(fileout,MI_TYPE_FCOMPLEX,start,count,(mifcomplex_t *)data3_3d);
   if(result == MI_ERROR)
   {
    fprintf(stderr, "Error in setting values.\n");
    return 0;
   }
  }
 fftwf_free(data1_3d); fftwf_free(data2_3d); fftwf_free(data3_3d);
  
 return 1;
}

int slicewise_multiply_complex_by_complex(mihandle_t file1, mihandle_t file2, mihandle_t fileout, int flags)
{
  
 long mz,my,mx;
 long nz,ny,nx;
 long pz,py,px;
 long z, slice, i;
 unsigned long start[3], count[3];
  
 fdr_complex *data1_3d = NULL;
 fdr_complex *data2_3d = NULL;
 fdr_complex *data3_3d = NULL;
  
 float x, y;

 int result;
 
 int num_slices = NUMSLICES;
 result = get_minc_spatial_dimensions_from_handle(file1, &mz, &my, &mx);
 if(!result) return 0;
 if(verbose>1) fprintf(stdout, "Obtained dim1\n");
  
 result = get_minc_spatial_dimensions_from_handle(file2, &nz, &ny, &nx);
 if(!result) return 0;
 if(verbose>1) fprintf(stdout, "Obtained dim2\n");
  
 if(mz != nz || my != ny || nx != nx)
 {
  fprintf(stderr, "Dimensions do not match (in1: [%ld,%ld,%ld] in2: [%ld,%ld,%ld])\n", mz,my,mx, nz,ny,nx);
  return 0;
 }
  
 result = get_minc_spatial_dimensions_from_handle(fileout, &pz, &py, &px);
 if(!result) return 0;
 if(verbose>1) fprintf(stdout, "Obtained dimout\n");
  
 if(mz != nz || my != ny || nx != nx)
 {
  fprintf(stderr, "Dimensions do not match (in1: [%ld,%ld,%ld] out: [%ld,%ld,%ld])\n", mz,my,mx, nz,ny,nx);
  return 0;
 }  
  
 data1_3d = (fdr_complex *)fftwf_malloc(num_slices*ny*nx*sizeof(fdr_complex));
 data2_3d = (fdr_complex *)fftwf_malloc(num_slices*ny*nx*sizeof(fdr_complex));
 data3_3d = (fdr_complex *)fftwf_malloc(num_slices*ny*nx*sizeof(fdr_complex));
 if(verbose>1) fprintf(stdout, "Allocated data\n");
  
 for(z=0;z<nz;z+=num_slices)
 {   
 if(z+num_slices > nz)
  {
   num_slices = nz - z;
  }

  /* 
   * Retrieve the data from the file 
   */
   start[0] = (unsigned long)z; start[1] = start[2] = 0;
   count[0] = NUMSLICES;
   count[1] = (unsigned long)my;
   count[2] = (unsigned long)mx;
    
   fprintf(stdout, "Collecting data from %ld %ld %ld -- %ld %ld %ld\n", start[0], start[1], start[2],
                                                               count[0]+start[0], count[1], count[2]);
   result = miget_voxel_value_hyperslab(file1,MI_TYPE_FCOMPLEX,start,count, (fdr_complex *) data1_3d);
   if(result == MI_ERROR)
   {
    fprintf(stderr, "Error loading 2D data file1.\n");
    return 0;
   }
    
   result = miget_voxel_value_hyperslab(file2,MI_TYPE_FCOMPLEX,start,count, (fdr_complex *) data2_3d);
   if(result == MI_ERROR)
   {
    fprintf(stderr, "Error loading 2D data file2.\n");
    return 0;
   }
        
   for(i=0;i<nx*ny*num_slices;i++)
   {
    data3_3d[i] = (fdr_complex)(data1_3d[i] * data2_3d[i]);
   }
    
   /* Write that out to the file */
   result = miset_voxel_value_hyperslab(fileout,MI_TYPE_FCOMPLEX,start,count,(mifcomplex_t *)data3_3d);
   if(result == MI_ERROR)
   {
    fprintf(stderr, "Error in setting values.\n");
    return 0;
   }
 }
 fftwf_free(data1_3d); fftwf_free(data2_3d); fftwf_free(data3_3d);
  
 return 1;
}

